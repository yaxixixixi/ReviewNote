总结项目中遇到的问题不足和应对方式



数据库设计
1、需要熟悉了解流程后才开始设计，尽量在发生错误的一开始就纠正（非必要情况下不要特殊处理，可能对以后的变更不兼容）；
2、数据库名尽量保持大写风格，单词间下划线分割；
3、Ormlite数据库需要避免在一步情况下操作事务，可能会造成死锁，一般情况下App操作的数据较少也不要开启事务操作；
4、数据库升级：sqlliete修改仅支持在列尾增加列，如果是修改列，一般做法为：将原表重命名为临时表，创建新表，将临时表的数据插入新表，删除临时表

数据类型
在根据接口文档设计数据库的时候可能有char/int/float/string等数据类型，而按照该类型定义数据库出现部分问题，如下：
1、在之后的变更中接口的char类型可能返回了多个字符，无法接收，直接更改本地数据类型牵涉较多容易出错（项目中做了特殊处理），应对就是对所有的费数字类型字符使用字符串String接收
2、float类型在使用到了小数后存储数据库再读取出来出现丢失精度的现象，如1.23 -> 1.229989,修改方式为使用都double接收或者统一使用字符串String接收。


网络请求处理
1、网络连接异常应在数据接收层直接处理掉或者传递给最终调用者下一级，而不应该抛给外部；业务异常则应传递给最终调用者来处理
2、关于网络不好以及非联网下请求数据应在调用层或者请求开始前或者使用拦截器拦截请求（如果需要显示信息则最好在调用处处理）
3、okhttp 要对request进行gzip压缩可以使用拦截器（可查看官方文档），返回的格式是压缩格式的话会自动解压缩，如果是自己添加的header可能导致框架不自动解压缩
4、okGo自动添加了gzip的header！所以要手动移除header

业务处理




界面处理  加载、交互
1、加载内容来源 内存、文件缓存、数据库缓存、网络、sharedPreference文件  根据页面声明周期处理
	及时性要求好的页面加载需要使用服务器数据初始化
	一般要求的可以使用本地数据初始化，然后在刷新的时候请求更新页面并更新本地数据
	如果是某个对象状态变化，可以在操作成功后直接修改状态，一般不需要重新获取服务端数据（数据量较大的情况下）
	如果是多个fragment页面需要处理好数据的加载顺序，应在当前页面所有后台线程处理结束并且页面加载完毕后进入交互模式（移除loadding，开始处理交互事件），
	目前存在的问题有数据加载顺序复杂，交互性差
2、正确处理缓存，如不经常变更的数据登录用户的信息可以直接用static于内存中缓存，其他情况根据场景选择直接使用数据库或者使用文件
3、如果滑动布局中有输入框，谨慎处理焦点问题
4、adapter里面的view会被重用，不要用全局变量随便引用
5、可以使用padding放大view的触控面积



log记录
1、对不同的处理记录不同级别的日志
2、避免记录太多无用的日志（release）
3、同一个异常尽量保证记录一次


异常处理/
1、所有会导致程序运行异常的异常如果能在发生的地方在不影响代码逻辑的情况下正确处理掉，
如果不能根据情景处理或者不符合预期的情景需要传递给最外层调用者，并由最外层调用者向用户提示或者交互，尽量不要在内部catch却不做任何处理

接口对接交流确认

环境配置
1、最好是将可能会变动的配置放入配置文件并加注释，可以在项目的gradle文件或者在项目中新建gradle文件配置参数
2、如果是多环境可以配置多个flavor，同时配置不同的applicationID，以及不同的versionSuffix配置；或者对不同的flavor匹配不同的源目录（源目录名称和flavor名称保持一致）
3、统一处理文件目录，为多id做兼容  /0/application/{flavorName}/image 
4、 

其他
1、避免在同步情况下使用回调函数
2、状态变化频繁的页面需要注意状态保存
3、注意图片的处理和销毁，注意静态对象对view或者活动等的引用，避免内存泄露
4、如果使用Rxjava一定要注意在页面结束的时候停止；并且一个Observable只能发送一个onError|onComplete事件